version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:13
    container_name: debug-player-postgres-prod
    environment:
      POSTGRES_DB: debug_player_framework
      POSTGRES_USER: debug_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-debug_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U debug_user -d debug_player_framework"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - debug-player-network

  # Python Backend
  python-backend:
    build:
      context: .
      dockerfile: Dockerfile.python
      target: production
    container_name: debug-player-python-prod
    environment:
      - PYTHONPATH=/app
      - HOST=0.0.0.0
      - PORT=8000
      - ENVIRONMENT=production
    expose:
      - "8000"
    volumes:
      - ./data:/app/data:ro
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - debug-player-network

  # Node.js Application (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: debug-player-app-prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://debug_user:${POSTGRES_PASSWORD:-debug_password}@postgres:5432/debug_player_framework
      - PYTHON_BACKEND_URL=http://python-backend:8000
      - PORT=5000
    expose:
      - "5000"
    depends_on:
      postgres:
        condition: service_healthy
      python-backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - debug-player-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: debug-player-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
      - python-backend
    restart: unless-stopped
    networks:
      - debug-player-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: debug-player-redis-prod
    expose:
      - "6379"
    volumes:
      - redis_data_prod:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - debug-player-network

networks:
  debug-player-network:
    driver: bridge

volumes:
  postgres_data_prod:
  redis_data_prod: