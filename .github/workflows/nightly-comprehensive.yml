name: 🌙 Nightly Comprehensive Testing

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # ==========================================
  # 🌙 Extended Nightly Tests
  # ==========================================
  nightly-extended-tests:
    name: 🌙 Extended Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18', '20', '22']
        python-version: ['3.9', '3.10', '3.11', '3.12']
      fail-fast: false
    steps:
      - name: 📦 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📥 Install Dependencies
        run: |
          npm ci
          cd python_backend && pip install -r requirements.txt

      - name: 🧪 Run Comprehensive Test Suite
        run: ./run-all-tests-comprehensive.sh

      - name: 📤 Upload Extended Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nightly-results-node${{ matrix.node-version }}-python${{ matrix.python-version }}
          path: test-reports/

  # ==========================================
  # 📊 Long-running Performance Tests
  # ==========================================
  nightly-performance:
    name: 📊 Extended Performance Testing
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📥 Install Dependencies
        run: |
          npm ci
          cd python_backend && pip install -r requirements.txt

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps

      - name: 🏗️ Build Application
        run: npm run build

      - name: 🚀 Start Services
        run: |
          cd python_backend && uvicorn main:app --host 0.0.0.0 --port 8000 &
          npm start &
          sleep 15

      - name: ⚡ Extended Performance Tests
        run: |
          # Run performance tests multiple times for statistical significance
          for i in {1..5}; do
            echo "Performance Test Run #$i"
            node test-performance.cjs
            sleep 30
          done

      - name: 📊 Memory Leak Detection
        run: |
          if [ -f "scripts/monitor-performance.sh" ]; then
            ./scripts/monitor-performance.sh
          else
            echo "No memory monitoring script found"
          fi

      - name: 📤 Upload Performance Reports
        uses: actions/upload-artifact@v4
        with:
          name: nightly-performance-reports
          path: test-reports/

  # ==========================================
  # 🔍 Code Quality Deep Scan
  # ==========================================
  nightly-quality-scan:
    name: 🔍 Deep Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🔍 SonarQube Analysis
        if: ${{ secrets.SONAR_TOKEN != '' }}
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: 🔒 OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Debug Player Framework'
          path: '.'
          format: 'HTML'
        continue-on-error: true

      - name: 📤 Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: reports/

  # ==========================================
  # 🌙 Nightly Summary
  # ==========================================
  nightly-summary:
    name: 🌙 Nightly Test Summary
    runs-on: ubuntu-latest
    needs: [nightly-extended-tests, nightly-performance, nightly-quality-scan]
    if: always()
    steps:
      - name: 📊 Generate Nightly Summary
        run: |
          echo "## 🌙 Nightly Comprehensive Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Matrix Results" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Extended Test Matrix | ${{ needs.nightly-extended-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Testing | ${{ needs.nightly-performance.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Deep Scan | ${{ needs.nightly-quality-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY