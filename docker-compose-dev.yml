version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:13
    container_name: debug-player-postgres
    environment:
      POSTGRES_DB: debug_player_framework
      POSTGRES_USER: debug_user
      POSTGRES_PASSWORD: debug_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U debug_user -d debug_player_framework"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Python Backend
  python-backend:
    build:
      context: .
      dockerfile: Dockerfile.python
    container_name: debug-player-python
    environment:
      - PYTHONPATH=/app
      - HOST=0.0.0.0
      - PORT=8000
    ports:
      - "8000:8000"
    volumes:
      - ./python_backend:/app
      - ./data:/app/data:ro
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Node.js Application (Development)
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: debug-player-app-dev
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://debug_user:debug_password@postgres:5432/debug_player_framework
      - PYTHON_BACKEND_URL=http://python-backend:8000
      - PORT=5000
    ports:
      - "5000:5000"
      - "24678:24678" # Vite HMR
    volumes:
      - .:/app
      - /app/node_modules
      - /app/dist
    depends_on:
      postgres:
        condition: service_healthy
      python-backend:
        condition: service_healthy
    command: npm run dev
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: debug-player-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: