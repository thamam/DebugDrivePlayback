#!/bin/bash
set -e

echo "üß™ Debug Player Framework - Complete Integration Test Suite"
echo "============================================================"
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test results tracking
BACKEND_TESTS_PASSED=false
FRONTEND_TESTS_PASSED=false

# Function to check if a service is running
check_service() {
    local url=$1
    local name=$2
    local timeout=${3:-5}
    
    echo -n "üîç Checking $name... "
    
    if curl -s --max-time $timeout "$url" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úì Running${NC}"
        return 0
    else
        echo -e "${RED}‚úó Not running${NC}"
        return 1
    fi
}

# Function to wait for service to be ready
wait_for_service() {
    local url=$1
    local name=$2
    local max_attempts=${3:-30}
    local attempt=1
    
    echo "‚è≥ Waiting for $name to be ready..."
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s --max-time 2 "$url" > /dev/null 2>&1; then
            echo -e "${GREEN}‚úì $name is ready${NC}"
            return 0
        fi
        
        echo -n "."
        sleep 1
        ((attempt++))
    done
    
    echo -e "${RED}‚úó $name failed to start within $max_attempts seconds${NC}"
    return 1
}

# Function to start services if needed
start_services() {
    echo "üöÄ Starting services..."
    echo ""
    
    # Check if Express server is running
    if ! check_service "http://localhost:5000/api/health" "Express Server"; then
        echo "‚ö° Starting Express server..."
        npm run dev > /dev/null 2>&1 &
        EXPRESS_PID=$!
        
        if wait_for_service "http://localhost:5000/api/health" "Express Server"; then
            echo -e "${GREEN}‚úì Express server started (PID: $EXPRESS_PID)${NC}"
        else
            echo -e "${RED}‚úó Failed to start Express server${NC}"
            exit 1
        fi
    fi
    
    # Check if Python backend is running
    if ! check_service "http://localhost:8000/health" "Python Backend"; then
        echo "‚ö° Starting Python backend..."
        cd python_backend
        uvicorn main:app --reload --host 0.0.0.0 --port 8000 > /dev/null 2>&1 &
        PYTHON_PID=$!
        cd ..
        
        if wait_for_service "http://localhost:8000/health" "Python Backend"; then
            echo -e "${GREEN}‚úì Python backend started (PID: $PYTHON_PID)${NC}"
        else
            echo -e "${RED}‚úó Failed to start Python backend${NC}"
            exit 1
        fi
    fi
    
    echo ""
}

# Function to run backend integration tests
run_backend_tests() {
    echo "üß™ Running Backend Integration Tests..."
    echo "-------------------------------------"
    
    if python3 test-integration-flow.py; then
        echo -e "${GREEN}‚úÖ Backend integration tests PASSED${NC}"
        BACKEND_TESTS_PASSED=true
    else
        echo -e "${RED}‚ùå Backend integration tests FAILED${NC}"
        BACKEND_TESTS_PASSED=false
    fi
    
    echo ""
}

# Function to run frontend integration tests
run_frontend_tests() {
    echo "üñ•Ô∏è  Running Frontend Integration Tests..."
    echo "----------------------------------------"
    
    # Check if Playwright is installed
    if ! command -v npx > /dev/null || ! npx playwright --version > /dev/null 2>&1; then
        echo -e "${YELLOW}‚ö† Playwright not found, installing...${NC}"
        npx playwright install chromium
    fi
    
    if node test-frontend-integration.js; then
        echo -e "${GREEN}‚úÖ Frontend integration tests PASSED${NC}"
        FRONTEND_TESTS_PASSED=true
    else
        echo -e "${RED}‚ùå Frontend integration tests FAILED${NC}"
        FRONTEND_TESTS_PASSED=false
    fi
    
    echo ""
}

# Function to run specific test scenarios
run_test_scenarios() {
    echo "üéØ Running Specific Test Scenarios..."
    echo "------------------------------------"
    
    # Test 1: Data Loading Flow
    echo "Scenario 1: Complete Data Loading Flow"
    echo "- Loading trip data from absolute path"
    echo "- Creating session"
    echo "- Loading trajectory data"
    echo "- Fetching signal data at multiple timestamps"
    
    if python3 -c "
from test_integration_flow import TestIntegrationFlow
import sys

try:
    test = TestIntegrationFlow()
    test.setup_class()
    test.test_01_backends_are_running()
    test.test_02_load_trip_data()
    test.test_03_create_session()
    test.test_04_load_trajectory_data()
    test.test_05_fetch_signal_data_at_timestamp()
    print('‚úÖ Data Loading Flow: PASSED')
except Exception as e:
    print(f'‚ùå Data Loading Flow: FAILED - {e}')
    sys.exit(1)
"; then
        echo -e "${GREEN}‚úì Data Loading Flow completed successfully${NC}"
    else
        echo -e "${RED}‚úó Data Loading Flow failed${NC}"
    fi
    
    echo ""
    
    # Test 2: Session Navigation Flow
    echo "Scenario 2: Session Navigation Flow"
    echo "- Trip loader page interaction"
    echo "- Session creation and navigation"
    echo "- Debug player initialization"
    echo "- Timeline interaction"
    
    if node -e "
const FrontendIntegrationTests = require('./test-frontend-integration.js');
const tests = new FrontendIntegrationTests();

tests.runAllTests().then(results => {
    const criticalTests = ['loadData', 'startAnalysis', 'timeline'];
    const passed = criticalTests.every(test => results[test] === true);
    
    if (passed) {
        console.log('‚úÖ Session Navigation Flow: PASSED');
        process.exit(0);
    } else {
        console.log('‚ùå Session Navigation Flow: FAILED');
        process.exit(1);
    }
}).catch(err => {
    console.log('‚ùå Session Navigation Flow: ERROR -', err.message);
    process.exit(1);
});
"; then
        echo -e "${GREEN}‚úì Session Navigation Flow completed successfully${NC}"
    else
        echo -e "${RED}‚úó Session Navigation Flow failed${NC}"
    fi
    
    echo ""
}

# Function to cleanup
cleanup() {
    echo "üßπ Cleaning up..."
    
    if [ ! -z "$EXPRESS_PID" ]; then
        echo "Stopping Express server (PID: $EXPRESS_PID)"
        kill $EXPRESS_PID > /dev/null 2>&1 || true
    fi
    
    if [ ! -z "$PYTHON_PID" ]; then
        echo "Stopping Python backend (PID: $PYTHON_PID)"
        kill $PYTHON_PID > /dev/null 2>&1 || true
    fi
    
    echo "Cleanup completed"
}

# Main execution
main() {
    # Set up trap for cleanup
    trap cleanup EXIT INT TERM
    
    # Start services
    start_services
    
    # Run all test suites
    run_backend_tests
    run_frontend_tests
    run_test_scenarios
    
    # Final summary
    echo "üìä FINAL TEST SUMMARY"
    echo "===================="
    
    if [ "$BACKEND_TESTS_PASSED" = true ]; then
        echo -e "${GREEN}‚úÖ Backend Integration Tests: PASSED${NC}"
    else
        echo -e "${RED}‚ùå Backend Integration Tests: FAILED${NC}"
    fi
    
    if [ "$FRONTEND_TESTS_PASSED" = true ]; then
        echo -e "${GREEN}‚úÖ Frontend Integration Tests: PASSED${NC}"
    else
        echo -e "${RED}‚ùå Frontend Integration Tests: FAILED${NC}"
    fi
    
    echo ""
    
    if [ "$BACKEND_TESTS_PASSED" = true ] && [ "$FRONTEND_TESTS_PASSED" = true ]; then
        echo -e "${GREEN}üéâ ALL INTEGRATION TESTS PASSED!${NC}"
        echo -e "${GREEN}   The complete data flow is working correctly!${NC}"
        echo ""
        echo "What this means:"
        echo "‚Ä¢ Trip data loads successfully from absolute paths"
        echo "‚Ä¢ Sessions are created and navigated properly"
        echo "‚Ä¢ Timeline slider triggers real signal data fetching"
        echo "‚Ä¢ No demo mode fallbacks are hiding real errors"
        echo "‚Ä¢ Both frontend and backend integration work end-to-end"
        exit 0
    else
        echo -e "${RED}‚ùå SOME INTEGRATION TESTS FAILED${NC}"
        echo -e "${RED}   Manual testing should not be needed once these pass${NC}"
        echo ""
        echo "These tests will catch the issues you've been finding manually:"
        echo "‚Ä¢ Session ID not being passed correctly"
        echo "‚Ä¢ Signal data not being fetched on timeline changes"
        echo "‚Ä¢ Visualization panels not displaying data"
        echo "‚Ä¢ Database connection issues"
        exit 1
    fi
}

# Run main function
main "$@"
